// Axel '0vercl0k' Souchet - January 2 2022
#pragma once
#include <random>
#include <type_traits>

std::random_device &RandomDevice() {
  static std::random_device RandomDevice;
  return RandomDevice;
}

struct Rng_t {
  std::mt19937_64 Rng_;
  Rng_t() : Rng_(RandomDevice()()) {}
  bool Flip() { return std::uniform_int_distribution(0, 1)(Rng_) == 1; }
  size_t Int(const size_t B) {
    return std::uniform_int_distribution<size_t>(0, B)(Rng_);
  }

  size_t Int(const size_t A, const size_t B) {
    return std::uniform_int_distribution(A, B)(Rng_);
  }

  size_t Index(const int Idx) {
    return std::uniform_int_distribution<size_t>(0, Idx)(Rng_);
  }

  template <typename Container_t> size_t Index(const Container_t &Container) {
    return std::uniform_int_distribution<size_t>(0, Container.size() - 1)(Rng_);
  }

  bool Lucky(const size_t B) { return Int(B) == B; }

  template <typename Container_t> auto &Pick(Container_t &Container) {
    return Container[Index(Container)];
  }
};